size = 1, colour = "red")
library(ggrepel)
ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red") + geom_text_repel()
ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean") + geom_text_repel()
dat <- subset(mtcars, wt > 2.75 & wt < 3.45)
dat$car <- rownames(dat)
p <- ggplot(dat, aes(wt, mpg, label = car)) +
geom_point(color = "red")
p1 <- p + geom_text() + labs(title = "geom_text()")
p2 <- p + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean") + geom_text_repel()
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red")
plot_text = plot_fake + geom_text_repel()
plot_text
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red")
plot_text = plot_fake + geom_text_repel() +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean")
plot_text
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red")
plot_text = plot_fake +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean")
plot_text
plot_fake2 = ggplot(data.frame(fakedata1), aes(x=fakedata1)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata1), linetype = "dashed",
size = 1, colour = "red")
plot_text2 = plot_fake2 +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata1), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean")
plot_text2
plot_text2 = plot_fake2 +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata1), 4)) +
annotate("text", x = -0.30, y = , label = "Mean")
plot_text2
plot_fake2 = ggplot(data.frame(fakedata1), aes(x=fakedata1)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata1), linetype = "dashed",
size = 1, colour = "red")
plot_text2 = plot_fake2 +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata1), 4)) +
annotate("text", x = -0.30, y = , label = "Mean")
plot_text2
plot_fake2 = ggplot(data.frame(fakedata1), aes(x=fakedata1)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata1), linetype = "dashed",
size = 1, colour = "red")
plot_text2 = plot_fake2 +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata1), 4)) +
annotate("text", x = -0.30, y = 15, label = "Mean")
plot_text2
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red")
plot_text = plot_fake +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 12, label = "Mean")
plot_text
plot_fake = ggplot(data.frame(fakedata), aes(x=fakedata)) +
geom_histogram(color="black", fill="white") +
ylab("Count") +
geom_vline(xintercept = mean(fakedata), linetype = "dashed",
size = 1, colour = "red")
plot_text = plot_fake +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 10, label = "Mean")
plot_text
plot_text2 = plot_fake2 +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata1), 4)) +
annotate("text", x = -0.30, y = 14, label = "Mean")
plot_text2
plot_text = plot_fake +
annotate("text", x = -0.30, y = 9, label = round(mean(fakedata), 4)) +
annotate("text", x = -0.30, y = 9.5, label = "Mean")
plot_text
plot_text2
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
#Male data
df_males = data.frame(
width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male"
)
#Female data
df_females = data.frame(
width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female"
)
df_body_widths = rbind(df_males, df_females)
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#what have we discussed on the simulation above is pretty much representing the randomization test.
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#what have we discussed on the simulation above is pretty much representing the randomization test.
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
set.seed(1234)
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#then start the randomization test by reshuffling our observations
reshuffled = df_body_widths
reshuffled$width = sample(reshuffled$width,
size = nrow(reshuffled), replace = FALSE)
ggplot(reshuffled, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(reshuffled, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(reshuffled, sex == "Female"),aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#calculate our statistics : difference in mean of width between male and females beetles
mean_males_sim1 = mean(reshuffled %>% filter(sex == "Male")
%>% pull(width))
mean_females_sim1 = mean(reshuffled %>% filter(sex == "Female")
%>% pull(width))
mean_diff_sim1 = mean_males_sim1 - mean_females_sim1
#repeat these reshuffling 1000 times
set.seed(11)
simulated_means = list()
for(i in 1:1000){
#Create temporary dataframe to permute so we don't modify the original
reshuffled = df_body_widths
#Permute the width column with the 'sample()' function.
reshuffled$width = sample(reshuffled$width, size = nrow(reshuffled),
replace = FALSE)
#Calculate the means for each sex
mean_males_sim = mean(reshuffled %>% filter(sex == "Male")
%>% pull(width))
mean_females_sim = mean(reshuffled %>% filter(sex == "Female")
%>% pull(width))
#Calculate to difference between simulated male and female body width means
mean_diff_sim = mean_males_sim - mean_females_sim
simulated_means[i] = mean_diff_sim
}
simulated_means = unlist(simulated_means)
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
geom_vline(xintercept = diff_means_obs, size = 1,
linetype = "dashed", colour = "black")
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
geom_vline(xintercept = simulated_means, size = 1,
linetype = "dashed", colour = "black")
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black")
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
geom_vline(xintercept = mean(simulated_means), size = 1,
linetype = "dashed", colour = "black")
mean_males = mean(df_males$width)
mean_females = mean(df_females$width)
diff_means_obs = mean_males - mean_females
#plot the result from reshuffling
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
geom_vline(xintercept = diff_means_obs, size = 1,
linetype = "dashed", colour = "black")
abs_simulated_means = abs(simulated_means)
abs_diff_means_obs = abs(diff_means_obs)
exceed_count = length(abs_simulated_means[abs_simulated_means >=
abs_diff_means_obs])
p_val = exceed_count / nreps
p_val = exceed_count / 1000
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#what have we discussed on the simulation above is pretty much representing the randomization test.
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
set.seed(1234)
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
mean_males = mean(df_males$width)
mean_females = mean(df_females$width)
diff_means_obs = mean_males - mean_females
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#then start the randomization test by reshuffling our observations
set.seed(12321)
reshuffled = df_body_widths
reshuffled$width = sample(reshuffled$width,
size = nrow(reshuffled), replace = FALSE)
ggplot(reshuffled, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(reshuffled, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(reshuffled, sex == "Female"),aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
#calculate our statistics : difference in mean of width between male and females beetles
mean_males_sim1 = mean(reshuffled %>% filter(sex == "Male")
%>% pull(width))
mean_females_sim1 = mean(reshuffled %>% filter(sex == "Female")
%>% pull(width))
mean_diff_sim1 = mean_males_sim1 - mean_females_sim1
#repeat these reshuffling 1000 times
set.seed(11)
simulated_means = list()
for(i in 1:1000){
#Create temporary dataframe to permute so we don't modify the original
reshuffled = df_body_widths
#Permute the width column with the 'sample()' function.
reshuffled$width = sample(reshuffled$width, size = nrow(reshuffled),
replace = FALSE)
#Calculate the means for each sex
mean_males_sim = mean(reshuffled %>% filter(sex == "Male")
%>% pull(width))
mean_females_sim = mean(reshuffled %>% filter(sex == "Female")
%>% pull(width))
#Calculate to difference between simulated male and female body width means
mean_diff_sim = mean_males_sim - mean_females_sim
simulated_means[i] = mean_diff_sim
}
simulated_means = unlist(simulated_means)
#plot the result from reshuffling
ggplot() +
ylab("Count") + xlab("Simulated mean difference") +
geom_histogram(aes(x = simulated_means), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
geom_vline(xintercept = diff_means_obs, size = 1,
linetype = "dashed", colour = "black")
abs_simulated_means = abs(simulated_means)
abs_diff_means_obs = abs(diff_means_obs)
exceed_count = length(abs_simulated_means[abs_simulated_means >=
abs_diff_means_obs])
p_val = exceed_count / 1000
#what have we discussed on the simulation above is pretty much representing the randomization test.
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
set.seed(1234)
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
mean_males = mean(df_males$width)
mean_females = mean(df_females$width)
diff_means_obs = mean_males - mean_females
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#what have we discussed on the simulation above is pretty much representing the randomization test.
#in summary the randomization test is done by :
#1)calculate test statistics(can be anything from means to difference in mean, or a specific test statistics such as t)
#2)reshuffle the observations, while each time calculating the test statistics
#3)repeat (2) several times generating our "distribution" of the test statistics
#4)calculate the proportion of times the actual test statistic is outside the distribution of test-statistics
#to illustrate this, lets yet again do simulation
#Imagine we had ventured to South America and collected 10 male and 10 female Hercules beetles.
#We brought the beetles back to the lab and measured the width of their bodies.
#The question we are interested in : Do male and female Hercules beetles differ in body width?
set.seed(1234)
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
mean_males = mean(df_males$width)
mean_females = mean(df_females$width)
diff_means_obs = mean_males - mean_females
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
df_males = data.frame(width = rnorm(10, mean=16.5, sd=2.5),
sex = "Male")#male data
df_females = data.frame(width = rnorm(n=10, mean=15, sd=1.8),
sex = "Female")#female data
df_body_widths = rbind(df_males, df_females)#combine both female and male data
#plot the data
ggplot(df_body_widths, aes(x = width, fill = sex)) +
ylab("Count") + xlab("Body width") +
geom_histogram(bins = 30, colour = "black") +
geom_vline(data = filter(df_body_widths, sex == "Male"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "red") +
geom_vline(data = filter(df_body_widths, sex == "Female"), aes(xintercept = mean(width)),
size = 1, linetype = "dashed", colour = "blue")
mean_males = mean(df_males$width)
mean_females = mean(df_females$width)
diff_means_obs = mean_males - mean_females
#test the difference in body width with t test
t.test(width ~ sex, data = df_body_widths, alternative = "two.sided")
#data are from the National Ecological Observatory Network and represent the presence and absence
#of plant species in eight square meter plots during the month of July, 2017, at a single site
#around Harvard, Boston, MA
#change into presence-absence matrix
neon_data_filtered = neon_data %>%
# We only want rows with plant species and not 'otherVariables'
dplyr::filter(divDataType == "plantSpecies") %>%
# To create a presence-absence matrix, we only need the taxonID
# (i.e. species) and the plotID (i.e. Site)
dplyr::select(plotID, taxonID)
#only keep unique rows so the cells represent presence-absence and not abundances
neon_data_filtered = unique(neon_data_filtered)
PA_matrix = dcast(neon_data_filtered, formula = taxonID ~ plotID, fun.aggregate = length)
head(PA_matrix)
#cooccurence analysis
set.seed(50)
co_oc_analysis <- cooc_null_model(PA_matrix, algo = "sim2",
nReps=1000,
metric = "c_score",
suppressProg = TRUE,
saveSeed = TRUE)
# Summarize output from co-occurrence analysis
summary(co_oc_analysis)
plot(co_oc_analysis)
oba = c(2, 3, 1, 4, 7, 5, 5, 4, 2, 1)
cont = c(3, 6, 4, 5, 5, 8, 6, 5, 7, 2)
data1 = rbind(cont, oba)
data1
mice2
data(mice2)
library(datarium)
data(mice2)
mice2
data1 = t(data1)
data1
data1 = as.data.frame(t(data1))
data1
data1 = cbind(cont, oba)
data1
data1 = as.data.frame(t(data1))
data1
data1 = cbind(cont, oba)
data1 = as.data.frame(data1)
mice2
data1 = data1 %>%
gather(key = "group", value = "symptom", cont, oba)
library(tidyverse)
data1 = data1 %>%
gather(key = "group", value = "symptom", cont, oba)
data1
wilcox.test(data1$group~data1$symptom)
wilcox.test(data1$symptom~data1$group)
wilcox.test(data1$symptom~data1$group)
wilcox.test(data1$symptom~data1$group, paired = TRUE)
wilcox.test(data1$symptom~data1$group, paired = FALSE)
ks.test(108, 112, 117, 130, 111, 131, 113, 113, 105, 128)
ks.test(c(108, 112, 117, 130, 111, 131, 113, 113, 105, 128))
ks.test(c(108, 112, 117, 130, 111, 131, 113, 113, 105, 128), normal, 120, 100)
ks.test(c(108, 112, 117, 130, 111, 131, 113, 113, 105, 128), "pnorm", 120, 100)
ks.test(c(108, 112, 117, 130, 111, 131, 113, 113, 105, 128), "pnorm", 120, 10)
ks.test(c(108, 112, 117, 130, 111, 131, 113, 113, 105, 128), "pnorm", 120, 10, conf.level = 0.9)
ks.test
